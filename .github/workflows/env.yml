name: Show Environment Info Workflow
on:
  workflow_call:
    inputs:
      env:
        type: string
        required: true

jobs:
  show-info:
    runs-on: ubuntu-latest
    steps:
      - name: Show Environment Info
        env:
          EVENT_NAME: ${{ github.event_name }}
          # Not available in push
          PR_TITLE: ${{ github.event.pull_request.title }}
          # Not available in pull_request
          HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          # TEMP Check environment
          echo "GITHUB_REF_NAME=${GITHUB_REF_NAME}"
          echo "GITHUB_HEAD_REF=${GITHUB_HEAD_REF}"

          echo "inputs.env=${{inputs.env}}"
          
          echo "EVENT_NAME=${EVENT_NAME}"
          echo "PR_TITLE=${PR_TITLE}"
          echo "HEAD_COMMIT_MESSAGE=${HEAD_COMMIT_MESSAGE}"

      - name: Check for do-something
        id: do-check
        env:
          # Not available in push
          PR_TITLE: ${{ github.event.pull_request.title }}
          # Not available in pull_request
          HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          FOUND=0
          FOUND_STRING='false'
          
          # Test checking for info
          if [[ "${PR_TITLE}" == *"[do-something]"* ]]; then
            echo "Found [do-something] in PR_TITLE in ${EVENT_NAME} event."
          fi
          if [[ "${HEAD_COMMIT_MESSAGE}" == *"[do-something]"* ]]; then
            echo "Found [do-something] in HEAD_COMMIT_MESSAGE in ${EVENT_NAME} event."
          fi
          if [[ "${PR_TITLE}" == *"[do-something]"* || "${HEAD_COMMIT_MESSAGE}" == *"[do-something]"* ]]; then
                echo "Found [do-something] in PR_TITLE or HEAD_COMMIT_MESSAGE in ${EVENT_NAME} event."
                FOUND=1
                FOUND_STRING='true'
          fi
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
          # You can make an environment variable available to any subsequent steps in a workflow job by defining or updating the environment variable and writing this to the GITHUB_ENV environment file. 
          echo "DO_SOMETHING=${FOUND}" >> "$GITHUB_ENV"
          # Sets a step's output parameter. Note that the step will need an id to be defined to later retrieve the output value.
          echo "DO_SOMETHING=${FOUND_STRING}" >> "$GITHUB_OUTPUT"

      - name: Referencing Environment Variables from prior step
        env:
          OUTPUTS_DO_SOMETHING: ${{ steps.do-check.outputs.DO_SOMETHING }}
        run: |
          echo "DO_SOMETHING=${DO_SOMETHING}"
          echo "OUTPUTS_DO_SOMETHING=${OUTPUTS_DO_SOMETHING}"

      - name: Run conditionally one
        if: "${{ env.DO_SOMETHING == 1 }}"
        run: echo "Running this step using env.DO_SOMETHING..."

      - name: Run conditionally two
        if: "${{ steps.do-check.outputs.DO_SOMETHING == 'true' }}"
        run: echo "Running this step using steps.do-check.outputs.DO_SOMETHING..."
